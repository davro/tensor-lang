// ============================================================================
// TensorLang: Deep Layer Norm
// ============================================================================
// Description: Tests deep neural network architecture
//
// Architecture Pattern:
//   'act2' output → Raw classification scores → Classification output → Softmax probabilities
//
// Expected Output Variables:
//   predictions, probs, logits, act2
//

// @EXPECTED
// {
//   "hidden1": [
//     [-0.19999999, 0.29999998, 1.6500001,   0.3,        0,          1.3499999],
//     [ 1.35,       0.15000004, 0.05,        1.1,        0.24999997, -0.75000006],
//     [-0.65,       0.04999998, 0.84999996, -0.45000002, 0,          0.7]
//   ],
//   "norm1": [
//     [-1.1146688, -0.38771093, 1.5750759,  -0.3877109,  -0.8238857,  1.1389008],
//     [1.4234263,  -0.2990391,  -0.4425779, 1.0645792,   -0.15550041, -1.5908881],
//     [-1.3394753, -0.06088526, 1.4003606,  -0.97416395, -0.1522131,  1.126377]
//   ],
//   "act1": [
//     [0,         0, 1.5750759, 0,         0, 1.1389008],
//     [1.4234263, 0, 0,         1.0645792, 0, 0],
//     [0,         0, 1.4003606, 0,         0, 1.126377]
//   ],
//
//   "hidden2": [
//     [0.47890526, 0.28528774,  0.06914748, 0.03723501],
//     [1.0093175,  -0.70405906, 0.76817435, 0.62582844],
//     [0.44270983, 0.26531148,  0.11780491, 0.00479672]
//   ],
//   "norm2": [
//     [1.4635187, 0.37892342, -0.8318383,  -1.0106038],
//     [0.8776018, -1.6949501, 0.515537,    0.30181152],
//     [1.4315574, 0.35114264, -0.54722124, -1.2354786]
//   ],
//   "act2": [
//     [0.81207025, 0.5936134,  0.3032565,  0.2668617],
//     [0.706325,   0.15512598, 0.6261036,  0.5748853],
//     [0.80714387, 0.58689463, 0.36650935, 0.22522399]
//   ],
//
//   "logits": [
//     [0.50359666, 0.1174764,   0.06029496],
//     [0.44528747, -0.00399197, 0.46985385],
//     [0.47581235, 0.13873455,  0.09162133]
//   ],
//   "probs": [
//     [0.430737,   0.2927671,  0.27649587],
//     [0.37552217, 0.23961611, 0.38486168],
//     [0.41756186, 0.29807794, 0.2843602]
//   ],
//   "predictions": [0.0, 2.0, 0.0]
// }


let input: Tensor[f32, (3, 4)] = [[1.0, -0.5, 2.0, 0.5],
                                  [-1.0, 1.5, -0.5, 2.0],
                                  [0.5, -1.0, 1.0, -0.5]]

// First layer: 4 -> 6 features
let w1: Tensor[f32, (4, 6)] = [[0.2, -0.3, 0.1, 0.4, -0.2, 0.3],
                               [0.5, 0.2, -0.1, 0.3, 0.4, -0.2],
                               [-0.2, 0.4, 0.6, -0.1, 0.2, 0.5],
                               [0.3, -0.1, 0.2, 0.5, -0.3, 0.1]]
let b1: Tensor[f32, (6,)] = [0.1, -0.05, 0.2, 0.0, 0.15, -0.1]

// Second layer: 6 -> 4 features
let w2: Tensor[f32, (6, 4)] = [[0.3, -0.2, 0.1, 0.4],
                               [-0.1, 0.4, 0.2, -0.3],
                               [0.2, 0.1, -0.3, 0.2],
                               [0.5, -0.3, 0.4, 0.1],
                               [-0.2, 0.3, -0.1, 0.5],
                               [0.1, 0.2, 0.3, -0.2]]
let b2: Tensor[f32, (4,)] = [0.05, -0.1, 0.2, -0.05]

// Third layer: 4 -> 3 classes
let w3: Tensor[f32, (4, 3)] = [[0.4, -0.3, 0.2],
                               [0.1, 0.5, -0.4],
                               [-0.2, 0.3, 0.6],
                               [0.3, -0.1, 0.2]]
let b3: Tensor[f32, (3,)] = [0.1, 0.0, -0.1]

// Forward pass with multiple layer norms
let hidden1 = linear(input, w1, b1)       // First linear layer
let norm1 = layer_norm(hidden1, axis=1)   // First layer norm
let act1 = relu(norm1)                    // First activation

let hidden2 = linear(act1, w2, b2)        // Second linear layer
let norm2 = layer_norm(hidden2, axis=1)   // Second layer norm
let act2 = sigmoid(norm2)                 // Second activation

let logits = linear(act2, w3, b3)         // Final classification layer
let probs = softmax(logits, axis=1)       // Convert to probabilities
let predictions = argmax(probs, axis=1)   // Get predicted classes

// Output the final predictions
predictions
