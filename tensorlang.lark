%import common.WS
%ignore WS

////////////////////////////////////////////////////////////////////////////////
// Program Structure
////////////////////////////////////////////////////////////////////////////////
start: program
program: (statement)*


////////////////////////////////////////////////////////////////////////////////
// Statement Rule
////////////////////////////////////////////////////////////////////////////////
//statement: function_def | let_binding | expr
statement: function_def 
         | let_binding 
         | if_statement 
         | backward_statement   
         | expr


////////////////////////////////////////////////////////////////////////////////
// Function Definitions
////////////////////////////////////////////////////////////////////////////////
function_def: "fn" NAME "(" [param_list] ")" ["->" type] "{" function_body "}"
param_list: param ("," param)*
param: NAME ":" type
function_body: (function_statement)* return_statement?
function_statement: let_binding | expr_statement
expr_statement: expr
return_statement: "return" expr

// Bindings
//let_binding: "let" NAME [":" type] "=" expr

let_binding: "let" NAME [":" type] "=" expr [grad_marker]

grad_marker: "with" "grad"


////////////////////////////////////////////////////////////////////////////////
// Expressions
////////////////////////////////////////////////////////////////////////////////
expr: tensor_literal 
    | fill_call 
    | matmul_call 
    | add_call 
    | minus_call
    | mult_call
    | div_call
    | relu_call 
    | sigmoid_call

    | gelu_call
    | swish_call

    | tanh_call
    | softmax_call
    | sum_call
    | mean_call
    | max_call
    | min_call
    | argmax_call
    | argmin_call
    | greater_call
    | less_call
    | equal_call
    | linear_call
    | layer_norm_call
    | batch_norm_call
    | instance_norm_call
    | cross_entropy_call
    | mse_loss_call
    | transpose_call
    | reshape_call
    | concat_call
    | slice_expr
    | user_function_call
    | NAME
    | NUMBER


////////////////////////////////////////////////////////////////////////////////
// Conditional statements TODO
////////////////////////////////////////////////////////////////////////////////
if_statement: "if" condition "{" (statement)* "}" (elif_clause)* (else_clause)?

elif_clause: "elif" condition "{" (statement)* "}"
else_clause: "else" "{" (statement)* "}"

// Conditions - support both tensor comparisons and compile-time constants
//condition: comparison_expr | NAME | "true" | "false"
// Conditions - support both tensor comparisons and compile-time constants
condition: comparison_expr | NAME | "true" | "false"

// Allow any expression (function calls, names, literals) in comparisons
//comparison_expr: NAME comp_op NAME | NAME comp_op NUMBER | reduction_call comp_op NUMBER
comparison_expr: expr comp_op expr

comp_op: ">" | "<" | ">=" | "<=" | "==" | "!="

// Add reduction calls that can be used in conditions
reduction_call: "any" "(" NAME ")" | "all" "(" NAME ")"


////////////////////////////////////////////////////////////////////////////////
// User-defined function calls (must come after built-in calls to avoid conflicts)
////////////////////////////////////////////////////////////////////////////////
user_function_call: NAME "(" [arg_list] ")"
arg_list: expr ("," expr)*

// Types - concrete type takes priority over generic
type: "Tensor" "[" dtype "," shape "]"          -> concrete_type
    | "Tensor" "[" generic_shape "]"            -> generic_type

dtype: "f32" | "f64"
shape: "(" NUMBER ("," NUMBER)* [","] ")"

// Generic shape parameters (for function signatures)
generic_shape: generic_dim ("," generic_dim)*
generic_dim: NAME | NUMBER


////////////////////////////////////////////////////////////////////////////////
// Expression Definitions
////////////////////////////////////////////////////////////////////////////////
tensor_literal: "[" (NUMBER ("," NUMBER)* | inner_array ("," inner_array)*) "]"
inner_array: "[" NUMBER ("," NUMBER)* "]"
fill_call: "fill" "(" NUMBER "," shape ")"
matmul_call: "matmul" "(" NAME "," NAME ")"
add_call: "add" "(" NAME "," NAME ")"
minus_call: "minus" "(" NAME "," NAME ")"
mult_call: "mult" "(" NAME "," NAME ")"
div_call: "div" "(" NAME "," NAME ")"
relu_call: "relu" "(" NAME ")"

gelu_call: "gelu" "(" NAME ")"
swish_call: "swish" "(" NAME ")"


////////////////////////////////////////////////////////////////////////////////
// Reduction operations
////////////////////////////////////////////////////////////////////////////////
sum_call: "sum" "(" NAME ["," "axis" "=" NUMBER] ")"
mean_call: "mean" "(" NAME ["," "axis" "=" NUMBER] ")"
max_call: "max" "(" NAME ["," "axis" "=" NUMBER] ")"
min_call: "min" "(" NAME ["," "axis" "=" NUMBER] ")"
argmax_call: "argmax" "(" NAME ["," "axis" "=" NUMBER] ")"
argmin_call: "argmin" "(" NAME ["," "axis" "=" NUMBER] ")"


////////////////////////////////////////////////////////////////////////////////
// Activation functions
////////////////////////////////////////////////////////////////////////////////
sigmoid_call: "sigmoid" "(" NAME ")"
tanh_call: "tanh" "(" NAME ")"
softmax_call: "softmax" "(" NAME ["," "axis" "=" NUMBER] ")"


////////////////////////////////////////////////////////////////////////////////
// Comparison operations
////////////////////////////////////////////////////////////////////////////////
greater_call: "greater" "(" NAME "," NAME ")"
less_call: "less" "(" NAME "," NAME ")"
equal_call: "equal" "(" NAME "," NAME ")"


////////////////////////////////////////////////////////////////////////////////
// Normalization operations
////////////////////////////////////////////////////////////////////////////////
layer_norm_call: "layer_norm" "(" NAME ["," "axis" "=" NUMBER] ["," "eps" "=" NUMBER] ")"
batch_norm_call: "batch_norm" "(" NAME "," NAME "," NAME ["," "eps" "=" NUMBER] ")"
instance_norm_call: "instance_norm" "(" NAME ["," "eps" "=" NUMBER] ")"


////////////////////////////////////////////////////////////////////////////////
// Loss functions
////////////////////////////////////////////////////////////////////////////////
cross_entropy_call: "cross_entropy" "(" NAME "," NAME ")"
mse_loss_call: "mse_loss" "(" NAME "," NAME ")"


////////////////////////////////////////////////////////////////////////////////
// Advanced tensor operations
////////////////////////////////////////////////////////////////////////////////
transpose_call: "transpose" "(" NAME ["," "axes" "=" "(" NUMBER ("," NUMBER)* ")"] ")"
reshape_call: "reshape" "(" NAME "," shape ")"
concat_call: "concat" "(" NAME "," NAME "," "axis" "=" NUMBER ")"


////////////////////////////////////////////////////////////////////////////////
// Tensor slicing
////////////////////////////////////////////////////////////////////////////////
slice_expr: NAME "[" slice_spec ("," slice_spec)* "]"
slice_spec: slice_range | NUMBER | ":"
slice_range: NUMBER ":" NUMBER | ":" NUMBER | NUMBER ":"


////////////////////////////////////////////////////////////////////////////////
// Neural network layers
////////////////////////////////////////////////////////////////////////////////
linear_call: "linear" "(" NAME "," NAME "," NAME ")"

////////////////////////////////////////////////////////////////////////////////
// Autograd backward
////////////////////////////////////////////////////////////////////////////////
backward_statement: "backward" "(" NAME ")"

////////////////////////////////////////////////////////////////////////////////
// Tokens 
////////////////////////////////////////////////////////////////////////////////
NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /-?\d+(\.\d+)?/


////////////////////////////////////////////////////////////////////////////////
// Comments
////////////////////////////////////////////////////////////////////////////////
%ignore /\/\/[^\n]*/         // Single-line comments
%ignore /\/\*[\s\S]*?\*\//   // Multi-line comments